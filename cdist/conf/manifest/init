# From here, all tasks implicitly depend on the previous one
export CDIST_ORDER_DEPENDENCY=1

############################################
# Hostname
############################################

# Since $__targethost specifies *how* to reach the gateway, but not
# necessarily it's hostname or id, you can explicitly set
# CDIST_SET_HOSTNAME on the first run to configure the hostname, and
# afterwards, it uses the previously configured hostname for finding out
# the TTN key
# This also sets the $hostname variable to retrieve the ttnkey below.
if [ -n "${CDIST_SET_HOSTNAME}" ]; then
  __hostname --name "${CDIST_SET_HOSTNAME}"
  hostname="${CDIST_SET_HOSTNAME}"
  echo "Setting hostname to \"${hostname}\""
else
  hostname=$(cat "$__explorer/hostname")
  echo "Using existing hostname \"${hostname}\""
fi

############################################
# SSH keys
############################################
# Note: This *overwrites* any existing keys, so do not lock yourself out!
__directory /root/.ssh --mode 700
__file /root/.ssh/authorized_keys \
	--source $__files/authorized_keys \
	--mode 600

############################################
# Apt
############################################
__apt_source buster \
  --uri http://deb.debian.org/debian \
  --distribution buster \
  --component "main contrib non-free"

__apt_default_release --release stretch

############################################
# Enable SPI
############################################

# Enable SPI hardware and set up SPI pins by loading an overlay.
# https://groups.google.com/d/msg/beagleboard/RewjY34TPYE/6b6YjSu0FQAJ
# Note that by default, in the Debian 9.3 image there is a "universal
# cape" overlay, which enables the SPI hardware, but does not setup the
# SPI pins (instead, it allows setting up pin direction using the
# config-pin command at runtime). This means that by default, there are
# /dev/spidev.x.x files present, but they won't work.
__line enable_spi \
  --file /boot/uEnv.txt \
  --line 'dtb_overlay=/lib/firmware/BB-SPIDEV0-00A0.dtbo'

# Enable SPI hardware when u-boot overlays are not enabled or supported,
# using the older capemgr method.
# Note that when booting from SD, the u-boot from the EMMC is still
# used. If this is an older version that does not support u-boot
# overlays, below line is also needed to enable SPI.
__line enable_spi_old \
  --file /boot/uEnv.txt \
  --line 'cape_enable=bone_capemgr.enable_partno=BB-SPIDEV0'

############################################
# Packet forwarder
############################################
__directory /opt/ttn-gateway

# TODO: Restart packetforwarder when the binary changes. The __file type
# outputs an "upload" message when it changes the file, but that only
# happens _after_ this manifest is ran, so that probably requires a
# specific type to just reload on a specific message
# See also https://github.com/ungleich/cdist/issues/637
#
# Install the actual forwarder binary
__file /opt/ttn-gateway/mp_pkt_fwd \
	--source $__files/forwarder/mp_pkt_fwd \
	--mode 755

# Install needed (self-compiled) libraries
__directory /usr/local/lib
for f in libpaho-embed-mqtt3c.so.1.0  libttn-gateway-connector.so; do
  __file "/usr/local/lib/$f" --source "$__files/forwarder/lib/$f"
done
__link /usr/local/lib/libpaho-embed-mqtt3c.so.1 --source libpaho-embed-mqtt3c.so.1.0 --type symbolic

# Tool to reset concentrator board by twiddling some GPIO pin.
# Copied from an older Lorank gateway, (some version of) the source can
# be found here: https://github.com/Ideetron/Lorank/blob/master/lorank8v1/ResetIC880A.cpp
# Might be replaceable by reset_lgw.sh, though a first try (passing "14"
# as the GPIO number) did not seem to work:
# https://github.com/kersing/lora_gateway/blob/master/reset_lgw.sh
__file /opt/ttn-gateway/ResetIC880A \
	--source $__files/forwarder/ResetIC880A \
	--mode 755

__systemd_unit packet-forwarder.service \
	--source $__files/forwarder/packet-forwarder.service \
	--state present \
        --enablement-state enabled

# This file was downloaded from TTN verbatim:
# https://raw.githubusercontent.com/TheThingsNetwork/gateway-conf/master/EU-global_conf.json
__config_file /opt/ttn-gateway/global_conf.json \
  --onchange 'systemctl restart packet-forwarder.service' \
  --source $__files/forwarder/global_conf.json

# Get the access key to use from TTN
ttnkey=$(ttnctl gateways info "${hostname}" | grep 'Access Key' | sed 's/\s*Access Key: //')

if [ -z "$ttnkey" ]; then
  # If we couldn't get the key, assume that one is already configured.
  # TODO: Check that there is a pre-existing config file and error out
  # otherwise?
  echo "Could not figure out TTN gateway key, skipping gateway configuration!" 2>1
else
  echo "Found TTN gateway key: ${ttnkey}"
  # TODO: Start and configure gateway using something like:
  #   https://github.com/jpmeijers/ttn-resin-gateway-rpi/blob/master/run.py
  # Possibly using Adafruit_BBIO for GPIO instead of ResetIC880A above:
  #   https://learn.adafruit.com/setting-up-io-python-library-on-beaglebone-black/gpio
  __config_file /opt/ttn-gateway/local_conf.json \
    --onchange 'systemctl restart packet-forwarder.service' \
    --source - \
<<EOF
{
    "gateway_conf": {
        "servers": [
            {
                "serv_type": "ttn",
                "server_address": "router.eu.thethings.network",
                "serv_gw_id": "${hostname}",
                "serv_gw_key": "${ttnkey}",
                "serv_enabled": true
            }
        ],
        "gps": false
    }
}
EOF
fi

############################################
# OpenVPN
############################################
__package_apt openvpn

__directory /etc/openvpn/tika

__config_file /etc/openvpn/tika/ca.crt \
  --source $__files/vpn/tika/ca.crt

if [ -f "$__files/vpn/keys/${hostname}.crt" -a -f "$__files/vpn/keys/${hostname}.crt" ]; then
  __config_file /etc/openvpn/tika/client.crt \
    --source $__files/vpn/keys/${hostname}.crt

  __config_file /etc/openvpn/tika/client.key \
    --source $__files/vpn/keys/${hostname}.key
else
  # TODO: Check if keys are already present
  echo "OpenVPN client keys not found, skipping them!" 2>1
fi

# This restarts only when tika.conf is changed, see
# https://github.com/ungleich/cdist/issues/637
__config_file /etc/openvpn/tika.conf \
  --source $__files/vpn/tika.conf \
  --onchange 'systemctl restart openvpn@tika.service'

__start_on_boot openvpn@tika.service

############################################
# OpenVPN check script
############################################
# TODO: Replace by something better. This script hardcodes the VPN
# server address. It would probably be better to have a watchdog cron
# job that reboots if a specific file has a timestamp > 24h (or
# whatever) old, and then have a cronjob on the VPN server that ssh's to
# the gateway and touches that file every 6h (or so). Then the entire
# stack of VPN and SSH access is tested, instead of just the IP
# connection.
__config_file /etc/cron.daily/vpn-check \
  --source $__files/vpn-check \
  --mode 755
